<?xml version="1.0" encoding="utf-8"?> 
<beans xmlns="http://www.springframework.org/schema/beans" 
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
    xmlns:aop="http://www.springframework.org/schema/aop" 
    xmlns:tx="http://www.springframework.org/schema/tx" 
    xmlns:context="http://www.springframework.org/schema/context"
    xsi:schemaLocation="  
            http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd  
            http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd  
            http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
            http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd"  
            default-lazy-init="false"> 

	<!-- 注解注入 -->
	<context:annotation-config />
	<context:component-scan base-package="com.std" />
	
	<!-- 使用annotation定义事务 -->
  	<tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true" />
  
  	<!-- 定义aspectj -->
  	<aop:aspectj-autoproxy proxy-target-class="true"/>
 
    <bean id="springContextHolder" class="com.std.sms.spring.SpringContextHolder"></bean>
    
    <!-- 参数验证 -->
    <!-- <bean id="validator" class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean">
        <property name="providerClass" value="org.hibernate.validator.HibernateValidator"/>
    </bean>  -->   

	<!-- mybatis写 -->
    <bean id="sqlSessionFactoryMaster" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="configLocation" value="classpath:mybatis/mybatis.xml" />
		<property name="typeHandlersPackage" value="com.std.sms.dao.base.handler" />
		<property name="mapperLocations" value="classpath*:mybatis/*Mapper.xml" />
	</bean>
	<!-- mybatis读 -->
	<bean id="sqlSessionFactorySlave" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="configLocation" value="classpath:mybatis/mybatis.xml" />
		<property name="typeHandlersPackage" value="com.std.sms.dao.base.handler" />
		<property name="mapperLocations" value="classpath*:mybatis/*Mapper.xml" />
		<property name="plugins">
			<array>
				<bean
					class="com.std.sms.dao.base.interceptor.PaginationInterceptor">
					<property name="dialect">
						<bean class="com.std.sms.dao.base.dialect.MySQLDialect" />
					</property>
				</bean>
			</array>
		</property>
	</bean>
	
	<bean id="writeSqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate"
		scope="prototype">
		<constructor-arg name="sqlSessionFactory" ref="sqlSessionFactoryMaster" />
	</bean>

	<bean id="readSqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate"
		scope="prototype">
		<constructor-arg name="sqlSessionFactory" ref="sqlSessionFactorySlave" />
	</bean>
	
	<!-- 另一个事务管理器, Jdbc单数据源事务 -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource" />
    </bean>
        
    <context:property-placeholder location="classpath*:/application.properties" />
    
    <!-- 数据源配置,使用应用内的Tomcat JDBC连接池 -->
	<bean id="dataSource" class="org.apache.tomcat.jdbc.pool.DataSource"
		destroy-method="close">
		<property name="driverClassName" value="${jdbc.driverClassName}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		<property name="maxActive" value="${jdbc.maxActive}" /><!-- 连接池的最大数据库连接数。设为0表示无限制。 --> 
		<!-- <property name="initialSize" value="10"/> -->  <!-- 初始化连接数量 -->
		<!-- <property name="maxWait" value="10000"/> -->  <!-- 最大建立连接等待时间。如果超过此时间将接到异常。设为-1表示无限制。 -->
		<!-- <property name="removeAbandonedTimeout" value="60"/> -->  <!--自我中断时间秒 -->
		<!-- <property name="logAbandoned" value="true"/>  --> <!--是否记录中断事件， 默认为 false-->
        <!-- <property name="removeAbandoned" value="true"/> -->  <!-- 是否自动回收超时连接-->
		<property name="maxIdle" value="${jdbc.maxIdle}" />
		<property name="minIdle" value="${jdbc.minIdle}" /> <!-- 最小等待连接中的数量,设 0 为没有限制 -->
		<property name="defaultAutoCommit" value="false" />
		<property name="jmxEnabled" value="true"/> <!-- 注册池JMX。的默认值是true。-->
        <property name="testWhileIdle" value="true"/> <!--默认值是false,当连接池中的空闲连接是否有效 -->
        <property name="testOnBorrow" value="true"/> <!-- 默认值是true，当从连接池取连接时，验证这个连接是否有效-->
        <property name="testOnReturn" value="false"/> <!--默认值是flase,当从把该连接放回到连接池的时，验证这个连接是 -->
        <property name="validationInterval" value="30000"/> <!--检查连接死活的时间间隔（单位：毫妙） 0以下的话不检查。默认是0。 -->
        <property name="validationQuery" value="SELECT 1"/> <!--一条sql语句，用来验证数据库连接是否正常。这条语句必须是一个查询模式，并至少返回一条数据。可以为任何可以验证数据库连接是否正常的sql-->
        <property name="timeBetweenEvictionRunsMillis" value="30000"/> <!-- #运行判断连接超时任务的时间间隔，单位为毫秒，默认为-1，即不执行任务。 -->
		<property name="minEvictableIdleTimeMillis" value="600000" /><!--连接的超时时间，默认为半小时。-->
	</bean>
</beans>